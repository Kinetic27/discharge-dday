{"version":3,"sources":["components/common/NowTime.js","components/common/LeftTime.js","pages/Main.js","components/App.js","index.js"],"names":["padNumber","num","length","String","padStart","NowTime","now","useRef","Date","useState","current","getFullYear","year","setYear","getMonth","month","setMonth","getDate","day","setDay","getHours","hour","setHour","getMinutes","min","setMin","getSeconds","sec","setSec","interval","useEffect","setInterval","clearInterval","className","id","calcTime","start","end","padTo2Digits","toString","startTime","endTime","totalTime","diff","d","Math","floor","h","m","s","percent","toFixed","minutes","seconds","isEnd","getRandom","max","random","LeftTime","title","time","setTime","style","backgroundPosition","value","Main","App","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.41153d8a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../../styles/NowTime.scss';\n\nconst padNumber = (num, length) => {\n  // 자릿수 맞추기\n  return String(num).padStart(length, '0');\n};\n\nconst NowTime = () => {\n  const now = useRef(new Date());\n\n\n  const [year, setYear] = useState(now.current.getFullYear());\n  const [month, setMonth] = useState(padNumber(now.current.getMonth() + 1, 2));\n  const [day, setDay] = useState(padNumber(now.current.getDate(), 2));\n\n  const [hour, setHour] = useState(padNumber(now.current.getHours(), 2));\n  const [min, setMin] = useState(padNumber(now.current.getMinutes(), 2));\n  const [sec, setSec] = useState(padNumber(now.current.getSeconds(), 2));\n\n\n  // useRef -> 로컬 변수(렌더링과 관계 없이 변경 ㄱㄴ)\n  const interval = useRef(null);\n\n  // useEffect -> 최초 마운트 시에만 실행\n  useEffect(() => {\n    interval.current = setInterval(() => {\n      now.current = new Date();\n\n      setYear(now.current.getFullYear());\n      setMonth(padNumber(now.current.getMonth() + 1, 2));\n      setDay(padNumber(now.current.getDate(), 2));\n\n      setHour(padNumber(now.current.getHours(), 2));\n      setMin(padNumber(now.current.getMinutes(), 2));\n      setSec(padNumber(now.current.getSeconds(), 2));\n    }, 1000);\n\n    // clean-up function (컴포넌트 언마운트 시 실행됨)\n    return () => clearInterval(interval.current);\n  }, []);\n\n  return (\n    <div className='section' id='now-time'>\n      <h3 id='now-title'>{year}년 {month}월 {day}일</h3>\n      <h1 id='now-timer'>{hour} : {min} : {sec}</h1>\n    </div>\n  );\n};\n\nexport default NowTime;","import React, { useState, useRef, useEffect } from 'react';\nimport '../../styles/LeftTime.scss';\n\nconst calcTime = (start, end) => {\n    const padTo2Digits = (num) => num.toString().padStart(2, '0');\n\n    const startTime = new Date(start);\n    const endTime = new Date(end);\n    const totalTime = endTime - startTime;\n\n    const nowTime = new Date();\n    const diff = endTime - nowTime;\n\n    const d = padTo2Digits(Math.floor(diff / (1000 * 60 * 60 * 24)));\n    const h = padTo2Digits(Math.floor((diff / (1000 * 60 * 60)) % 24));\n    const m = padTo2Digits(Math.floor((diff / (1000 * 60)) % 60));\n    const s = padTo2Digits(Math.floor((diff / 1000) % 60));\n\n    const percent = (100 - (diff / totalTime) * 100).toFixed(6);\n\n    return {\n        day: d,\n        hour: h,\n        minutes: m,\n        seconds: s,\n        percent: percent,\n        isEnd: percent > 100,\n    };\n};\n\nconst getRandom = (min, max) => Math.random() * (max - min) + min;\n\nconst LeftTime = ({ title, start = '2022-10-31', end }) => {\n    const [time, setTime] = useState(calcTime(start, end));\n    const interval = useRef(null);\n    useEffect(() => {\n        interval.current = setInterval(() => {\n            setTime(calcTime(start, end));\n\n            // clean-up function (컴포넌트 언마운트 시 실행됨)\n            return () => clearInterval(interval.current);\n        }, 1000);\n    }, [start, end]);\n\n    return (\n        <>\n            {!time.isEnd && (\n                <div\n                    className=\"section\"\n                    id=\"time-left\"\n                    style={{\n                        backgroundPosition: `1% * ${getRandom(\n                            0,\n                            100,\n                        )} 1% * ${getRandom(0, 100)}`,\n                    }}\n                >\n                    <h1 className=\"left-title\">{title}</h1>\n                    <div>\n                        <span className=\"left-text\" id=\"left-day\">\n                            {time.day}일,&nbsp;\n                        </span>\n                        <span className=\"left-text\" id=\"left-time\">\n                            {time.hour}시간 {time.minutes}분 {time.seconds}초\n                        </span>\n                    </div>\n                    <div className=\"progress-group\">\n                        <progress\n                            className=\"left-progress\"\n                            value={time.percent}\n                            min=\"0\"\n                            max=\"100\"\n                        />\n                        <span className=\"left-percent\">{time.percent}%</span>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default LeftTime;\n","import NowTime from '../components/common/NowTime';\nimport LeftTime from '../components/common/LeftTime';\nimport '../styles/Main.scss';\n\nconst Main = () => {\n    return (\n        <div className=\"main-component\">\n            <div className=\"container\">\n                <NowTime />\n                <LeftTime title=\"첫 휴가까지\" end=\"2023-01-13\" />\n                <LeftTime title=\"상병까지\" end=\"2023-07-01\" />\n                <LeftTime title=\"병장까지\" end=\"2024-01-01\" />\n                <LeftTime title=\"전역까지\" end=\"2024-04-30\" />  \n            </div>\n        </div>\n    );\n};\n\nexport default Main;\n","import { Route, Routes } from 'react-router-dom';\nimport Main from '../pages/Main';\n\n\n\nconst App = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Main />} />\n      <Route path=\"*\" element={<div>sorry error</div>} />\n    </Routes>\n  );\n};\n\n/*\nhttps://gongbbu.tistory.com/71\nhttps://velog.io/@chez_bono/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\n*/\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}