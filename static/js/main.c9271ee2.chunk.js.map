{"version":3,"sources":["components/common/NowTime.js","components/common/LeftTime.js","pages/Main.js","components/App.js","index.js"],"names":["getDate","now","Date","offset","getTimezoneOffset","getTime","toISOString","split","date","time","year","month","day","hour","minutes","seconds","NowTime","useState","setTime","interval","useRef","useEffect","current","setInterval","clearInterval","className","id","calcTime","start","end","num","length","nowTime","startTime","endTime","total","diff","percent","leftDay","Math","floor","toString","padStart","max","toFixed","isEnd","LeftTime","title","getRandom","min","random","randomBackground","backgroundPosition","style","value","Main","App","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c9271ee2.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../../styles/NowTime.scss';\n\nconst getDate = () => {\n    const now = new Date();\n    const offset = now.getTimezoneOffset();\n    let [date, time] = new Date(now.getTime() - offset * 60 * 1000)\n        .toISOString()\n        .split('T');\n\n    date = date.split('-');\n    time = time.split('.')[0].split(':');\n\n    return {\n        year: date[0],\n        month: date[1],\n        day: date[2],\n        hour: time[0],\n        minutes: time[1],\n        seconds: time[2],\n    };\n};\n\nconst NowTime = () => {\n    const [time, setTime] = useState(getDate());\n    const interval = useRef(null);\n\n    useEffect(() => {\n        interval.current = setInterval(() => {\n            setTime(getDate());\n        }, 1000);\n\n        return () => clearInterval(interval.current);\n    }, []);\n\n    return (\n        <div className=\"section\" id=\"now-time\">\n            <h3 id=\"now-title\">\n                {time.year}년 {time.month}월 {time.day}일\n            </h3>\n            <h1 id=\"now-timer\">\n                {time.hour} : {time.minutes} : {time.seconds}\n            </h1>\n        </div>\n    );\n};\n\nexport default NowTime;\n","import React, { useState, useRef, useEffect } from 'react';\nimport '../../styles/LeftTime.scss';\n\nconst calcTime = (start, end) => {\n    const padTo2Digits = (num, length) => num.toString().padStart(length, '0');\n\n    const nowTime = new Date();\n    const startTime = new Date(start);\n    const endTime = new Date(end);\n\n    const total = endTime - startTime;\n    const diff = endTime - nowTime;\n\n    // Date to [hh, mm, ss]\n    let time = new Date(diff)\n        .toISOString()\n        .split('T')[1]\n        .split('.')[0]\n        .split(':');\n\n    const day = padTo2Digits(Math.floor(diff / (1000 * 60 * 60 * 24)), 2);\n    const percent = 100 - (diff / total) * 100;\n\n    return {\n        leftDay: day,\n        hour: time[0],\n        minutes: time[1],\n        seconds: time[2],\n        percent: Math.max(0, percent).toFixed(6),\n        isEnd: percent > 100,\n    };\n};\n\nconst LeftTime = ({\n    title,\n    start = '2022-10-31',\n    end = '2024-04-30 08:00:00',\n}) => {\n    const [time, setTime] = useState(calcTime(start, end));\n    const interval = useRef(null);\n\n    useEffect(() => {\n        interval.current = setInterval(() => {\n            const time = calcTime(start, end);\n            setTime(time);\n\n            return () => clearInterval(interval.current);\n        }, 100);\n    }, [start, end, time]);\n\n    const getRandom = (min, max) => Math.random() * (max - min) + min;\n    const randomBackground = useRef({\n        backgroundPosition: `${getRandom(0, 100)}% ${getRandom(0, 100)}%`,\n    });\n\n    return (\n        <>\n            {!time.isEnd && (\n                <div\n                    className=\"section\"\n                    id=\"time-left\"\n                    style={randomBackground.current}\n                >\n                    <h1 className=\"left-title\">{title}</h1>\n                    <div>\n                        <span className=\"left-text\" id=\"left-day\">\n                            {time.leftDay}일,&nbsp;\n                        </span>\n                        <span className=\"left-text\" id=\"left-time\">\n                            {time.hour}시간 {time.minutes}분 {time.seconds}초\n                        </span>\n                    </div>\n                    <div className=\"progress-group\">\n                        <progress\n                            className=\"left-progress\"\n                            value={time.percent}\n                            min=\"0\"\n                            max=\"100\"\n                        />\n                        <span className=\"left-percent\">{time.percent}%</span>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default LeftTime;\n","import NowTime from '../components/common/NowTime';\nimport LeftTime from '../components/common/LeftTime';\nimport '../styles/Main.scss';\n\nconst Main = () => {\n    return (\n        <div className=\"container\">\n            <div className=\"some-blank\" />\n            <NowTime />\n            <LeftTime title=\"첫 휴가까지\" end=\"2023-01-13\" />\n            <LeftTime title=\"일병까지\" end=\"2023-01-01 07:00\" />\n            <LeftTime title=\"상병까지\" end=\"2023-07-01 07:00\" />\n            <LeftTime title=\"생일까지\" end=\"2023-10-27 06:30\" />\n            <LeftTime title=\"병장까지\" end=\"2024-01-01 07:00\" />\n            <LeftTime title=\"전역까지\" end=\"2024-04-30 06:00\" />\n            <div className=\"some-blank\" />\n        </div>\n    );\n};\n\nexport default Main;\n","import { Route, Routes } from 'react-router-dom';\nimport Main from '../pages/Main';\n\n\n\nconst App = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Main />} />\n      <Route path=\"*\" element={<div>sorry error</div>} />\n    </Routes>\n  );\n};\n\n/*\nhttps://gongbbu.tistory.com/71\nhttps://velog.io/@chez_bono/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%83%80%EC%9D%B4%EB%A8%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\n*/\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './components/App';\n// import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}